# 다이나믹 프로그래밍 = 동적 계획법
# 1. 최적 부분 구조 (Optimal Substructure) : 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.
# 2. 중복되는 부분 문제 (Overlapping Subproblem) : 동일한 작은 문제를 반복적으로 해결해야 한다.

# 피보나치 수열 문제
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 점화식 = 인접한 항들 사이의 관계식을 의미

def fifo(x):
    if x == 1 or x == 2:
        return 1
    return fifo(x-1) + fifo(x-2)

print(fifo(20)) # 20번째 피포나치수열의 수 반환

# 피보나치 수열의 시간 복잡도 = O(2^N)
# 따라서 다이나믹 프로그래밍을 이용한다면 빠르게 연산 가능

# 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수를 재귀함수로 구현 (탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건 (1혹은 2일때 1을 반환)
    if x == 1 or x ==2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fifo(x - 1) + fifo(x - 2)
    return d[x]

print(fibo(99))


# 보텀업 다이나믹 프로그래밍 소스코드
d = [0] * 100

# 첫번째 피보나치 수와 두번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수 반복문으로 구현 (보텀업 다이나믹 프로그래밍)
for i in range(3, n+1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])