# 파라매트릭 서치
#  파라매트릭 서치란 최적화 문제를 결정문제 ("예" 혹은 "아니오")로 바꾸어 해결하는 기법입니다.
# 예시 : 특정한 조건을  만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
# 일반적으로 코딩테스트에서 파라메트릭 서치 문제는 이진 탐색을 이용하여 해결할 수 있습니다.

# 떡볶이 떡 만들기
# 동빈이는 여행가신 부모님을 대신해서 떡집 일을 하기로 했습니다. 오늘은 떡볶이 떡을 만드는 날입니다
# 동빈이네 떡볶이 떡은 재밌게도 떡볶이 떡의 길이가 일정하지 않습니다.
# 대신에 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰줍니다.
# 절단기에 높이(H)를 지정하면 줄지어진 떡을 한 번에 절단합니다.
# 높이가 H보다 긴 떡은 H위의 부분이 잘릴것이고 낮은 떡은 잘리지 않습니다.
# 예를 들어 높이가 19, 14, 10, 17cm인 떡이 나란히 있고 절단기 높이를 15cm로 지정하면 자른 뒤 떡의 높이는
# 15, 14, 10, 15cm 가 될것입니다. 잘린 떡의 길이는 차례대로 4, 0, 0, 2cm 입니다. 손님은 6cm 만큼의 길이를 가져갑니다.
# 손님이 왔을 때 요청한 총 길이가 M 일때 적어도 M 만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하시오

# 문제 해결법
# 이진 탐색을 통해 '현재 이 높이로 자르면 조건을 만족할 수 있는가?' 를 확인한 뒤에
# 조건의 만족여부 ('예' 혹은 '아니오')에 따라서 탐색 범위를 좁혀서 해결할 수 있다.
# 큰 탐색범위를 보면 -> 이진탐색을 떠올려야 함.

# 떡의 개수(N)과 요청한 떡의 길이(M)을 입력
n, m = list(map(int, input().split(' ')))

# 각 떡의 개별 높이 정보를 입력
array = list(map(int, input().split()))

# 이진 탐색을 위한 시작점과 끝점 설정
start = 0
end = max(array)

# 이진 탐색 수행 (반복적)
result = 0
while(start <= end):
    total = 0
    mid = (start + end) //2
    for x in array:
        # 잘랐을 때의 떡의 양 계산
        if x > mid:
            total += x - mid
        # 떡의 양이 부족한 경우 더 많이 자르기 (왼쪽 부분 탐색)
        if total < m:
            end = mid - 1
        # 떡의 양이 충분한 경우 덜 자르기 (오른쪽 부분 탐색)
        else:
            result = mid
            start = mid + 1

print(result)